/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  
  
 
  
  
  
  
  - For any other route not defined in the server return 404
  
  Testing the server - run `npm run test-todoServer` command in terminal
  */
 const express = require('express')
 const app = express()
 const bodyParser = require('body-parser')
 const port = 3000
 
 app.use(bodyParser.json());
 
 // 2.GET /todos/:id - Retrieve a specific todo item by ID
 // Description: Returns a specific todo item identified by its ID.
 // Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
 // Example: GET http://localhost:3000/todos/123
 function todosById(req, res){
   let result = (toFindElementById(array,parseInt(req.params.id)));
   if(result===-1){
     res.status(404).send("The id that you are searching is not here");
    }
    else 
      res.json(result);
    }
    // 1.GET /todos - Retrieve all todo items
    //   Description: Returns a list of all todo items.
    //   Response: 200 OK with an array of todo items in JSON format.
    //   Example: GET http://localhost:3000/todos
    function todoHandler(req, res){
      // console.log("/todos route");
      res.send(array);
    }
    app.get('/todos', todoHandler);
    app.get('/todos/:id', todosById);
    
    app.listen(port, () => {
      console.log(`this app is running on ${port}`);
    })
    module.exports = app;
    
    let array = [{
      "title": "grocery",
      "description": "buy dadi's medicines",
      "completed": false,
      "id": 1
    },
    {
      "title": "study",
      "description": "complete weeek2 assignments and next lecture",
      "completed": false,
      "id": 2
    }
]


function toFindElementById(array, id1){
  for(let i=0; i<array.length; i++){
    if(array[i].id === id1){
      return array[i];
    }
  } 
  return -1;
}
// 3. POST /todos - Create a new todo item
//     Description: Creates a new todo item.
//     Request Body: JSON object representing the todo item.
//     Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
//     Example: POST http://localhost:3000/todos
//     Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
app.post('/todos', postHandler);

function getRandomNumber(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

function postHandler(req, res){
  // let todo = req.body;
  // array.push(todo);
  
  let id = getRandomNumber(5,10);
  
  // array[2]['id'] = id;
  
  let idObject = {
    "title": req.body.title,
    "description": req.body.description,
    "id": id
  }
  array.push(idObject);
  res.status(201).send(idObject);
  
}

// 4. PUT /todos/:id - Update an existing todo item by ID
//     Description: Updates an existing todo item identified by its ID.
//     Request Body: JSON object representing the updated todo item.
//     Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
//     Example: PUT http://localhost:3000/todos/123
//     Request Body: { "title": "Buy groceries", "completed": true }


app.put('/todos/:id', putHandler);
function putHandler(req, res){
  let idToBeUpdated = parseInt(req.params.id);
  console.log(typeof(idToBeUpdated));
  let flag = false;
  for(let i = 0; i<array.length; i++){
    if(idToBeUpdated === array[i].id){
      array[i]['title'] = req.body.title;
      console.log(req.body.completed);
      console.log(array[i]['completed']);
      array[i]['completed'] = req.body.completed;
      flag = true;
    }
  }
  if(flag === true){
    res.status(200).send();
  }
  else 
  res.status(404).send("Not Found");
}
// 5. DELETE /todos/:id - Delete a todo item by ID
//   Description: Deletes a todo item identified by its ID.
//   Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
//   Example: DELETE http://localhost:3000/todos/123
app.delete('/todos/:id', deleteHandler);
function deleteHandler(req, res){
  let id = parseInt(req.params.id);
  let flag = false;
  for(let i = 0; i<array.length; i++){
    if(array[i].id === id){
      array.splice(i,1);
      flag = true;
    }
  }
  if(flag === false)  
    res.status(404).send("Not Found");
  else res.status(200).send();
}

app.use((req, res, next) => {
  res.status(404).send("Not Found");
})